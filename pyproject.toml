[project]
name = "streamduck"
version = "0.1.0"
description = "StreamDuck - Azure EventHub to MotherDuck streaming pipeline"
readme = "README.md"
authors = [
    { name = "MiguelElGallo", email = "60221874+MiguelElGallo@users.noreply.github.com" }
]
requires-python = ">=3.13"
dependencies = [
    "azure-eventhub>=5.15.0",
    "azure-identity>=1.15.0",
    "aiohttp>=3.9.0",
    "duckdb>=0.9.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "typer>=0.19.2",
    "rich>=13.0.0",
    "mypy>=1.18.2",
    "tenacity>=9.1.2",
    "pydantic-ai>=1.2.1",
    "logfire>=2.7.0",
]

[project.scripts]
streamduck = "main:cli_main"

[build-system]
requires = ["uv_build>=0.9.2,<0.10.0"]
build-backend = "uv_build"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "azure.*",
    "duckdb.*",
    "pydantic.*",
    "pydantic_settings.*",
    "dotenv.*",
    "typer.*",
    "rich.*"
]
ignore_missing_imports = true

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.8.0",
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--disable-warnings",
]
testpaths = ["tests"]
markers = [
    "unit: mark test as a unit test",
    "integration: mark test as an integration test",
    "asyncio: mark test as async",
    "slow: mark test as slow running",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "strict"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]
branch = true
relative_files = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
target-version = "py313"
line-length = 100
src = ["src"]
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "tests",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "RUF", # ruff-specific rules
]
ignore = [
    "E501", # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # Allow unused imports in __init__.py

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
